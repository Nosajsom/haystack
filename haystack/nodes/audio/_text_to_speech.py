from typing import Union, Callable, Any, Optional, Dict

import os
import hashlib
from pathlib import Path

import numpy as np
import soundfile as sf

from pydub import AudioSegment
from espnet2.bin.tts_inference import Text2Speech as _Text2SpeechModel


class TextToSpeech:
    """
    This class converts text into audio using text-to-speech models.

    NOTE: This is NOT a node. Use AnswerToSpeech or DocumentToSpeech.
    """

    def __init__(self, model_name_or_path: Union[str, Path], transformers_params: Optional[Dict[str, Any]] = None):
        """
        :param model_name_or_path: the text to speech model, for example `espnet/kan-bayashi_ljspeech_vits`
        :param transformers_params: parameters to pass over to the Text2Speech.from_pretrained() call.
        """
        super().__init__()
        self.model = _Text2SpeechModel.from_pretrained(model_name_or_path, **(transformers_params or {}))

    def text_to_audio_file(
        self,
        text: str,
        generated_audio_dir: Path,
        audio_format: str = "wav",
        subtype: str = "PCM_16",
        audio_naming_function: Callable = lambda text: hashlib.md5(text.encode("utf-8")).hexdigest(),
    ) -> Path:
        """
        Convert an input string into an audio file containing the same string read out loud.

        :param text: the text to convert into audio
        :param generated_audio_dir: folder to save the audio file to
        :param audio_format: the format to save the audio into (wav, mp3, ...)
        :param subtype: see soundfile.write()
        :param audio_naming_function: function mapping the input text into the audio file name.
                By default, the audio file gets the name from the MD5 sum of the input text.
        :return: the path to the generated file
        """

        if not os.path.exists(generated_audio_dir):
            os.mkdir(generated_audio_dir)

        filename = audio_naming_function(text)
        file_path = generated_audio_dir / f"{filename}.{audio_format}"

        # We avoid regenerating if a file with the same name is already in the folder, to save time.
        # This happens rather often in text from AnswerToSpeech.
        if not os.path.exists(file_path):
            audio_data = self.text_to_audio_data(text)
            if audio_format == "wav":
                sf.write(
                    file=file_path, data=audio_data, samplerate=self.model.fs, subtype=subtype, format=audio_format
                )
            else:
                self.compress_audio(path=file_path, data=audio_data, sample_rate=self.model.fs, format=audio_format)

        return file_path

    def text_to_audio_data(self, text: str) -> np.array:
        """
        Convert an input string into a numpy array representing the audio.

        :param text: the text to convert into audio
        :return: a Numpy array representing the audio generated by the model.
        """
        output = self.model(text)["wav"]
        return output.numpy()

    def compress_audio(
        self,
        path: Path,
        data: np.array,
        format: str,
        sample_rate: int,
        sample_witdh: int = 2,
        channels_count: int = 1,
        bitrate: str = "320k",
        normalized=True,
    ):
        """
        Export a Numpy array into an audio file of the desired format. Support all formats supported by `pydub.AudioSegment.export()`
        """
        data = np.int16((data * 2**15) if normalized else data)
        audio = AudioSegment(data.tobytes(), frame_rate=sample_rate, sample_width=sample_witdh, channels=channels_count)
        audio.export(path, format=format, bitrate=bitrate)
