from typing import Union, Callable, Any, Optional, Dict, Any

import os
import hashlib
from pathlib import Path

import numpy as np

from espnet2.bin.tts_inference import Text2Speech as _Text2SpeechModel
import soundfile as sf


class TextToSpeech:
    """
    This class converts text into audio using text-to-speech models.

    NOTE: This is NOT a node. Use AnswerToSpeech or DocumentToSpeech.
    """

    def __init__(self, model_name_or_path: Union[str, Path], transformers_params: Optional[Dict[str, Any]] = None):
        """
        :param model_name_or_path: the text to speech model, for example `espnet/kan-bayashi_ljspeech_vits`
        :param transformers_params: parameters to pass over to the Text2Speech.from_pretrained() call.
        """
        super().__init__()
        self.model = _Text2SpeechModel.from_pretrained(model_name_or_path, **(transformers_params or {}))

    def text_to_audio_file(
        self,
        text: str,
        generated_audio_path: Path,
        audio_format: str = "wav",
        subtype: str = "PCM_16",
        audio_naming_function: Callable = lambda text: hashlib.md5(text.encode("utf-8")).hexdigest(),
    ) -> Path:
        """
        Convert an input string into an audio file containing the same string read out loud.

        :param text: the text to convert into audio
        :param generated_audio_path: folder to save the audio file to
        :param audio_format: the format to save the audio into (wav, mp3, ...)
        :param subtype: see soundfile.write()
        :param audio_naming_function: function mapping the input text into the audio file name.
                By default, the audio file gets the name from the MD5 sum of the input text.
        :return: the path to the generated file
        """

        if not os.path.exists(generated_audio_path):
            os.mkdir(generated_audio_path)

        filename = audio_naming_function(text)
        generated_audio_file = generated_audio_path / f"{filename}.{audio_format}"

        # We avoid regenerating if a file with the same name is already in the folder, to save time.
        # This happens rather often in text from AnswerToSpeech.
        if not os.path.exists(generated_audio_file):
            audio_data = self.text_to_audio_data(text)
            sf.write(generated_audio_file, audio_data, self.model.fs, subtype)

        return generated_audio_file

    def text_to_audio_data(self, text: str) -> np.array:
        """
        Convert an input string into a numpy array representing the audio.

        :param text: the text to convert into audio
        :return: a Numpy array representing the audio generated by the model.
        """
        output = self.model(text)["wav"]
        return output.numpy()
